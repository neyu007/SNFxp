'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.0
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="snfdbxp")>  _
Partial Public Class UsersDataClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertRole(instance As Role)
    End Sub
  Partial Private Sub UpdateRole(instance As Role)
    End Sub
  Partial Private Sub DeleteRole(instance As Role)
    End Sub
  Partial Private Sub InsertUser(instance As User)
    End Sub
  Partial Private Sub UpdateUser(instance As User)
    End Sub
  Partial Private Sub DeleteUser(instance As User)
    End Sub
  Partial Private Sub InsertBranch(instance As Branch)
    End Sub
  Partial Private Sub UpdateBranch(instance As Branch)
    End Sub
  Partial Private Sub DeleteBranch(instance As Branch)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.SNFxp.My.MySettings.Default.Setting, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Roles() As System.Data.Linq.Table(Of Role)
		Get
			Return Me.GetTable(Of Role)
		End Get
	End Property
	
	Public ReadOnly Property Users() As System.Data.Linq.Table(Of User)
		Get
			Return Me.GetTable(Of User)
		End Get
	End Property
	
	Public ReadOnly Property Branches() As System.Data.Linq.Table(Of Branch)
		Get
			Return Me.GetTable(Of Branch)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Roles")>  _
Partial Public Class Role
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RoleID As Integer
	
	Private _RoleName As String
	
	Private _Users As EntitySet(Of User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRoleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRoleIDChanged()
    End Sub
    Partial Private Sub OnRoleNameChanging(value As String)
    End Sub
    Partial Private Sub OnRoleNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Users = New EntitySet(Of User)(AddressOf Me.attach_Users, AddressOf Me.detach_Users)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RoleID() As Integer
		Get
			Return Me._RoleID
		End Get
		Set
			If ((Me._RoleID = value)  _
						= false) Then
				Me.OnRoleIDChanging(value)
				Me.SendPropertyChanging
				Me._RoleID = value
				Me.SendPropertyChanged("RoleID")
				Me.OnRoleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleName", DbType:="VarChar(50)")>  _
	Public Property RoleName() As String
		Get
			Return Me._RoleName
		End Get
		Set
			If (String.Equals(Me._RoleName, value) = false) Then
				Me.OnRoleNameChanging(value)
				Me.SendPropertyChanging
				Me._RoleName = value
				Me.SendPropertyChanged("RoleName")
				Me.OnRoleNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Role_User", Storage:="_Users", ThisKey:="RoleID", OtherKey:="RoleID")>  _
	Public Property Users() As EntitySet(Of User)
		Get
			Return Me._Users
		End Get
		Set
			Me._Users.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Users(ByVal entity As User)
		Me.SendPropertyChanging
		entity.Role = Me
	End Sub
	
	Private Sub detach_Users(ByVal entity As User)
		Me.SendPropertyChanging
		entity.Role = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Users")>  _
Partial Public Class User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserID As Integer
	
	Private _Username As String
	
	Private _Password As String
	
	Private _RoleID As System.Nullable(Of Integer)
	
	Private _BranchID As System.Nullable(Of Integer)
	
	Private _Role As EntityRef(Of Role)
	
	Private _Branch As EntityRef(Of Branch)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnUsernameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnRoleIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRoleIDChanged()
    End Sub
    Partial Private Sub OnBranchIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBranchIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Role = CType(Nothing, EntityRef(Of Role))
		Me._Branch = CType(Nothing, EntityRef(Of Branch))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Username", DbType:="VarChar(50)")>  _
	Public Property Username() As String
		Get
			Return Me._Username
		End Get
		Set
			If (String.Equals(Me._Username, value) = false) Then
				Me.OnUsernameChanging(value)
				Me.SendPropertyChanging
				Me._Username = value
				Me.SendPropertyChanged("Username")
				Me.OnUsernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(50)")>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleID", DbType:="Int")>  _
	Public Property RoleID() As System.Nullable(Of Integer)
		Get
			Return Me._RoleID
		End Get
		Set
			If (Me._RoleID.Equals(value) = false) Then
				If Me._Role.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRoleIDChanging(value)
				Me.SendPropertyChanging
				Me._RoleID = value
				Me.SendPropertyChanged("RoleID")
				Me.OnRoleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BranchID", DbType:="Int")>  _
	Public Property BranchID() As System.Nullable(Of Integer)
		Get
			Return Me._BranchID
		End Get
		Set
			If (Me._BranchID.Equals(value) = false) Then
				If Me._Branch.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBranchIDChanging(value)
				Me.SendPropertyChanging
				Me._BranchID = value
				Me.SendPropertyChanged("BranchID")
				Me.OnBranchIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Role_User", Storage:="_Role", ThisKey:="RoleID", OtherKey:="RoleID", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property Role() As Role
		Get
			Return Me._Role.Entity
		End Get
		Set
			Dim previousValue As Role = Me._Role.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Role.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Role.Entity = Nothing
					previousValue.Users.Remove(Me)
				End If
				Me._Role.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Users.Add(Me)
					Me._RoleID = value.RoleID
				Else
					Me._RoleID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Role")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Branch_User", Storage:="_Branch", ThisKey:="BranchID", OtherKey:="BranchID", IsForeignKey:=true)>  _
	Public Property Branch() As Branch
		Get
			Return Me._Branch.Entity
		End Get
		Set
			Dim previousValue As Branch = Me._Branch.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Branch.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Branch.Entity = Nothing
					previousValue.Users.Remove(Me)
				End If
				Me._Branch.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Users.Add(Me)
					Me._BranchID = value.BranchID
				Else
					Me._BranchID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Branch")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Branch")>  _
Partial Public Class Branch
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BranchID As Integer
	
	Private _BranchName As String
	
	Private _Address As String
	
	Private _ContactNo As String
	
	Private _Users As EntitySet(Of User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBranchIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBranchIDChanged()
    End Sub
    Partial Private Sub OnBranchNameChanging(value As String)
    End Sub
    Partial Private Sub OnBranchNameChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnContactNoChanging(value As String)
    End Sub
    Partial Private Sub OnContactNoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Users = New EntitySet(Of User)(AddressOf Me.attach_Users, AddressOf Me.detach_Users)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BranchID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BranchID() As Integer
		Get
			Return Me._BranchID
		End Get
		Set
			If ((Me._BranchID = value)  _
						= false) Then
				Me.OnBranchIDChanging(value)
				Me.SendPropertyChanging
				Me._BranchID = value
				Me.SendPropertyChanged("BranchID")
				Me.OnBranchIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BranchName", DbType:="VarChar(50)")>  _
	Public Property BranchName() As String
		Get
			Return Me._BranchName
		End Get
		Set
			If (String.Equals(Me._BranchName, value) = false) Then
				Me.OnBranchNameChanging(value)
				Me.SendPropertyChanging
				Me._BranchName = value
				Me.SendPropertyChanged("BranchName")
				Me.OnBranchNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(100)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactNo", DbType:="VarChar(50)")>  _
	Public Property ContactNo() As String
		Get
			Return Me._ContactNo
		End Get
		Set
			If (String.Equals(Me._ContactNo, value) = false) Then
				Me.OnContactNoChanging(value)
				Me.SendPropertyChanging
				Me._ContactNo = value
				Me.SendPropertyChanged("ContactNo")
				Me.OnContactNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Branch_User", Storage:="_Users", ThisKey:="BranchID", OtherKey:="BranchID")>  _
	Public Property Users() As EntitySet(Of User)
		Get
			Return Me._Users
		End Get
		Set
			Me._Users.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Users(ByVal entity As User)
		Me.SendPropertyChanging
		entity.Branch = Me
	End Sub
	
	Private Sub detach_Users(ByVal entity As User)
		Me.SendPropertyChanging
		entity.Branch = Nothing
	End Sub
End Class
